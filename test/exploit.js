const { expect } = require("chai")
const { ethers } = require("hardhat")

describe("Deploy contracts", function() {
    let deployer, user, exploit, bankContract

    beforeEach(async function() {
        [deployer, user, attacker] = await ethers.getSigners()
        const BankFactory = await ethers.getContractFactory("Bank", deployer)

        this.bankContract = await BankFactory.deploy()

        // 100 ETH for example purposes (a lot of people don't own this much)
        await bankContract.deposit({ value: ethers.utils.parseEther("100") })
        await bankContract.connect(user).deposit({ value: ethers.utils.parseEther("50") })
        const ExploitFactory = await ethers.getContractFactory("Exploit", exploit)

        this.exploitContract = await ExploitFactory.deploy(this.bankContract.address)
    })

    describe("Deposit and withdrawal of 'Bank' smart contract", function() {
        it ("Should accept deposits", async function() {
            const deployerBalance = await this.bankContract.balanceOf(deployer.address)

            expect(deployerBalance).to.eq(ethers.utils.parseEther("100"))
            const userBalance = await this.bankContract.balanceOf(user.address)

            expect(userBalance).to.eq(ethers.utils.parseEther("50"))
        })

        it ("Force-allow withdrawals", async function() {
            await this.bankContract.withdraw()
            const deployerBalance = await this.bankContract.balanceOf(deployer.address)
            const userBalance = await this.bankContract.balanceOf(user.address)

            expect(deployerBalance).to.eq(0)
            expect(userBalance).to.eq(ethers.utils.parseEther("50"))
        })

        it ("Print results", async function() {
            console.log("")
            console.log("*** Previous Balance ***")
            console.log(`Bank account balance: ${ethers.utils.formatEther(await ethers.provider.getBalance(this.bankContract.address)).toString()}`)
            console.log(`Exploit return balance": ${ethers.utils.formatEther(await ethers.provider.getBalance(attacker.address)).toString()}`)
            
            expect(await ethers.provider.getBalance(this.bankContract.address)).to.eq(0)
        })
    })
})